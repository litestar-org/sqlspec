name: Latest Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-source:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --extra performance --group build

      - name: Build source distribution
        run: uv build --sdist

      - name: Upload source artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-dist
          path: dist/*.tar.gz

  build-wheels-standard:
    name: Std ${{ matrix.os }} py${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          - os: macos-13
            python-version: "3.13"
          - os: windows-latest
            python-version: "3.9"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --extra performance --group build

      - name: Build standard wheel
        run: uv build --wheel

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-standard-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl

  build-wheels-mypyc:
    name: MyPyC ${{ matrix.os }} py${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          - os: windows-latest
            python-version: "3.9"
          - os: macos-13
            python-version: "3.13"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Set version to include mypyc suffix
        run: |
          sed -i 's/version = "0.15.0"/version = "0.15.0+mypyc"/' pyproject.toml
        shell: bash

      - name: Install dependencies with mypyc extras
        run: uv sync --extra mypyc --group build

      - name: Set up MyPyC environment variables
        run: |
          echo "MYPYC_OPT_LEVEL=3" >> $GITHUB_ENV
          echo "MYPYC_DEBUG_LEVEL=0" >> $GITHUB_ENV
          echo "MYPYC_MULTI_FILE=1" >> $GITHUB_ENV
        shell: bash

      - name: Build MyPyC wheel
        run: uv build --wheel
        env:
          HATCH_BUILD_HOOKS_ENABLE: "1"

      - name: Upload mypyc wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-mypyc-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl


  test-wheels:
    name: Test ${{ matrix.os }} py${{ matrix.python-version }}
    needs: [build-wheels-standard, build-wheels-mypyc]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.12"]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Download standard wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-standard-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist-standard/

      - name: Download mypyc wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-mypyc-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist-mypyc/

      - name: Test standard wheel installation
        run: |
          uv venv test-standard --python ${{ matrix.python-version }}
          uv pip install --python test-standard --find-links dist-standard/ sqlspec
          uv run --python test-standard python -c "import sqlspec; print('Standard wheel OK')"

      - name: Test mypyc wheel installation
        run: |
          uv venv test-mypyc --python ${{ matrix.python-version }}
          uv pip install --python test-mypyc --find-links dist-mypyc/ sqlspec
          uv run --python test-mypyc python -c "import sqlspec; print('MyPyC wheel OK')"

  publish-release:
    name: Publish to PyPI
    needs: [build-source, build-wheels-standard, build-wheels-mypyc, test-wheels]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/project/sqlspec/

    steps:
      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: dist/

      - name: List all built packages
        run: |
          echo "=== All built packages ==="
          find dist/ -name "*.whl" -o -name "*.tar.gz" | sort
          echo "=== Package count ==="
          find dist/ -name "*.whl" | wc -l
          find dist/ -name "*.tar.gz" | wc -l

      - name: Verify package integrity
        run: |
          uv tool install twine
          uv tool run twine check dist/*

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true
