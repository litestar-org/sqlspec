# SQLSpec Development Guidelines

## Naming Conventions

- Private methods start with underscore: `_method_name`
- Configuration methods use "configure": `_configure_connection`, `_configure_pool`
- Connection callbacks use "on_connection_create"
- Configs follow the pattern `{DB}Config` (e.g. `DuckDBConfig`).  If the database driver supports Sync and Async connections, use `{DB}SyncConfig` and `{DB}AsyncConfig`
- Each driver should export a type alias of that drivers Connection object (`DuckDBConnection: TypeAlias = DuckDBPyConnection`)
- Driver adapters follow pattern: `{DB}Driver` (e.g. `DuckDBDriver`).  If the driver support Sync and Async connections, use `{DB}SyncDriver` and `{DB}AsyncDriver`
- Use Python 3.9+ type hints (this means `tuple` instead of `Tuple`, `dict` vs `Dict`, `list` vs `List`, etc)
- Never use `from __future__ import annotations`.  Please stringify type quotes.
- Do not do needless variable assignments to make the linter satisfied.  Simple cast or ignore instead of copying.

## Base Protocol Structure

- `DatabaseConfigProtocol` is the base for all configs
- Split connection creation into:
    - `create_connection()` - public API
    - `_create_connection()` - internal implementation
    - `_configure_connection()` - post-creation setup

## Connection Callback Pattern

```python
on_connection_create: "Optional[Callable[[ConnectionT], Optional[ConnectionT]]]" = None
"""A callable to be called after the connection is created."""

def _configure_connection(self, connection: ConnectionT) -> ConnectionT:
    """Configure a connection with the on_connection_create callback if set."""
    if self.on_connection_create is not None:
        result = self.on_connection_create(connection)
        if result is not None:
            return result
    return connection
```

## Config Class Structure

- Sync/Async variants:
    - `NoPoolSyncConfig`
    - `NoPoolAsyncConfig`
    - `SyncDatabaseConfig`
    - `AsyncDatabaseConfig`
- All must implement:
    - `create_connection()`
    - `_create_connection()`
    - `_configure_connection()`

## Driver Adapter Structure

- Inherit from appropriate base:
    - `SyncDriverAdapterProtocol`
    - `AsyncDriverAdapterProtocol`
- Common attributes:
    - `connection: ConnectionT`
    - `dialect: str`
    - `__supports_arrow__: ClassVar[bool]`

## Type Hints

- Use `ConnectionT` for connection types
- Use `PoolT` for pool types
- Use `DriverT` for driver types
- Use `ModelDTOT` for model types
- Use `StatementParameterType` for query parameters

## Error Handling

- Use `NotFoundError` for missing results
- Use `check_not_found()` helper for result validation

## SQL Processing

- Use `_process_sql_params()` for SQL and parameter processing
- Use `SQLStatement` for SQL validation and formatting

## Testing Requirements

- Test both sync and async paths
- Test with and without connection pooling
- Test connection callbacks
- Test error cases
- Test type safety
