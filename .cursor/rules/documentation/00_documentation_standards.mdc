---
description: 
globs: 
alwaysApply: false
---
# Documentation Standards

## Objective
To ensure all code and project features are well-documented, making the project understandable, maintainable, and accessible to both users and contributors.

## Context
- **Docstrings**: Python code uses docstrings for inline documentation.
- **Project Documentation**: Located in the `docs/` directory and built using Sphinx.
- **Formats**: reStructuredText (`.rst`) and Markdown (`.md` via MyST parser) are used.
- **Linting**: `sphinx-lint` is used to check documentation files (as per pre-commit).

## Rules

### 1. Docstrings (Python Code)
- **Coverage**: Write clear and concise docstrings for all public modules, classes, functions, and methods.
- **Style**: Follow a consistent style. `project.instructions.md` mentions Google or NumPy style, and `pyproject.toml` specifies `convention = "google"` for Ruff's pydocstyle.
    Therefore, **Google style docstrings are required.**
- **Content**: Docstrings must explain:
    - Purpose of the object.
    - Arguments (`Args:` section), including their types.
    - Keyword arguments (`Kwargs:` section), if applicable.
    - Return values (`Returns:` section), including their types, **unless the return type is `None`**.
    - Exceptions raised (`Raises:` section), with a description of when they are raised.
- **Type Hints in Docstrings**: Use type hints in docstrings where applicable and to complement signature type hints if necessary for clarity (though signature hints are primary).

    âœ… **Good (Google Style Example):**
    ```python
    def my_function(param1: int, param2: str) -> bool:
        """Does something interesting.

        Args:
            param1: The first parameter, an integer.
            param2: The second parameter, a string.

        Returns:
            True if successful, False otherwise.

        Raises:
            ValueError: If param1 is negative.
        """
        if param1 < 0:
            raise ValueError("param1 cannot be negative")
        return True
    ```

### 2. Project Documentation (`docs/` directory)
- **Updates**: Update or add documentation in the `docs/` directory as needed when new features are added, APIs change, or existing functionality is modified.
- **Location for New Content**: For new features or modules, create corresponding `.rst` or `.md` files in the appropriate `docs/` subdirectory (e.g., `docs/usage/`, `docs/reference/`).
- **Sphinx Configuration**: Be aware of the Sphinx configuration in `docs/conf.py` and any custom extensions or settings used.
- **Markup**: Use reStructuredText (`.rst`) and Markdown (`.md`) appropriately, following existing conventions within the `docs/` directory and Sphinx/MyST-Parser guidelines.
- **Linting**: Ensure documentation files pass `sphinx-lint` checks (enforced via pre-commit).
- **Local Build & Review**: Before submitting documentation changes:
    - Build the documentation locally (e.g., using `make docs` or `uv run sphinx-build -b html docs docs/_build/html`).
    - Review the generated HTML output (typically in `docs/_build/html/`) to ensure correct rendering and no build errors.
    - Use live-reloading servers if available (e.g., `make docs-serve` or `uv run sphinx-autobuild docs docs/_build/html`).

## Exceptions
- Private helper functions or internal modules with limited scope may have less extensive docstrings, but their purpose should still be clear from their name and context.
- Minor code changes that do not affect user-facing APIs or behavior might not require extensive updates to the `docs/` directory, but inline docstrings should still be accurate.
