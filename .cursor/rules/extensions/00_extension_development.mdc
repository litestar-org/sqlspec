---
description:
globs:
alwaysApply: false
---
# Framework Extension Development

## Objective
To ensure that new framework extensions (e.g., for Litestar, FastAPI, Flask) are consistent, high-quality, and integrate well with both `sqlspec` and the target framework.

## Context
- Framework extensions enhance `sqlspec` usability within popular Python web frameworks.
- The `README.md` indicates `sqlspec/extensions/` as the location for these integrations (e.g., `litestar/`, `fastapi/`, `flask/`).
- Consistency and adherence to both `sqlspec` and framework-specific best practices are important.

## Rules

### 1. Adherence to Existing Patterns (If Any)
- **Study Existing Extensions**: If other framework extensions exist in `sqlspec/extensions/`, review their structure, API design, and integration patterns.
- **Framework Best Practices**: Follow the idiomatic way of creating extensions or plugins for the target framework (e.g., Litestar plugins, FastAPI dependencies/plugins).
- **`sqlspec` Integration**: Ensure the extension integrates cleanly with `sqlspec`'s core functionalities (e.g., session management, configuration).

### 2. Directory Structure and Placement
- **Location**: New framework extensions should be placed in a new subdirectory within `sqlspec/extensions/` (e.g., `sqlspec/extensions/myframework/`).
- **Modularity**: Organize the extension code logically.

### 3. Configuration and Usage
- **Ease of Use**: The extension should be easy for users to configure and use within their framework-based application.
- **Clear API**: Provide a clear and well-documented API for the extension.

### 4. Testing
- **Comprehensive Tests**: New extensions MUST include relevant unit and integration tests.
    - **Unit Tests**: Place in `tests/unit/test_extensions/test_{extension_name}/`. Mock framework-specific and `sqlspec` core dependencies as needed.
    - **Integration Tests**: Place in `tests/integration/test_extensions/test_{extension_name}/` (if applicable). These might involve setting up minimal framework applications to test the extension's behavior in a runtime-like environment.
- **Test Coverage**: Aim for high test coverage.

### 5. Documentation
- **Docstrings**: Provide clear docstrings for all public parts of the extension.
- **Project Documentation**: Add a new section or page to the `docs/` directory detailing:
    - How to install and configure the extension.
    - Usage examples within the target framework.
    - Any specific considerations or limitations.

### 6. Code Quality
- Adhere to all general project coding standards (style, typing, linting, error handling) as defined in other `.mdc` rule files.

## Exceptions
- If a target framework has unique extension mechanisms that require significant deviation from any existing `sqlspec` extension patterns, these must be justified and discussed with project maintainers.
