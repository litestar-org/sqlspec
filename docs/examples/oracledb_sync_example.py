# /// script
# dependencies = [
#   "sqlspec[oracledb]",
#   "rich",
# ]
# requires-python = ">=3.10"
# ///
"""Example demonstrating oracledb sync driver usage with query mixins.

This example shows how to use the oracledb sync driver with the development Oracle
container started by `make infra-up`.
"""

from rich import print

from sqlspec import SQLSpec, sql
from sqlspec.adapters.oracledb import OracleSyncConfig

__all__ = ("main", "oracledb_sync_example")


def oracledb_sync_example() -> None:
    """Demonstrate oracledb sync database driver usage with query mixins."""
    # Create SQLSpec instance with Oracle (connects to dev container)
    spec = SQLSpec()
    db = spec.add_config(
        OracleSyncConfig(
            pool_config={
                "host": "localhost",
                "port": 1522,
                "user": "system",
                "password": "oracle",
                "service_name": "FREEPDB1",
            }
        )
    )

    # Get a driver directly (drivers now have built-in query methods)
    with spec.provide_session(db) as driver:
        # Create a table
        driver.execute("""
            BEGIN
                EXECUTE IMMEDIATE 'DROP TABLE departments CASCADE CONSTRAINTS';
            EXCEPTION
                WHEN OTHERS THEN NULL;
            END;
        """)

        driver.execute("""
            CREATE TABLE departments (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR2(255) NOT NULL,
                budget NUMBER(12,2) NOT NULL,
                manager_name VARCHAR2(255),
                created_date DATE DEFAULT SYSDATE
            )
        """)

        # Insert data
        driver.execute(
            "INSERT INTO departments (name, budget, manager_name) VALUES (:1, :2, :3)",
            "Engineering",
            500000.00,
            "Alice Johnson",
        )

        # Insert multiple rows
        driver.execute_many(
            "INSERT INTO departments (name, budget, manager_name) VALUES (:1, :2, :3)",
            [
                ("Marketing", 250000.00, "Bob Smith"),
                ("Sales", 300000.00, "Carol Davis"),
                ("HR", 150000.00, "David Wilson"),
                ("Finance", 200000.00, "Emma Brown"),
            ],
        )

        # Select all departments using query mixin
        departments = driver.select("SELECT * FROM departments ORDER BY budget")
        print(f"[cyan]All departments:[/cyan] {departments}")

        # Select one department using query mixin
        engineering = driver.select_one("SELECT * FROM departments WHERE name = :1", "Engineering")
        print(f"[cyan]Engineering:[/cyan] {engineering}")

        # Select one or none (no match) using query mixin
        nobody = driver.select_one_or_none("SELECT * FROM departments WHERE name = :1", "Nobody")
        print(f"[cyan]Nobody:[/cyan] {nobody}")

        # Select scalar value using query mixin
        total_budget = driver.select_value("SELECT SUM(budget) FROM departments")
        print(f"[cyan]Total budget:[/cyan] ${total_budget:.2f}")

        # Update
        result = driver.execute("UPDATE departments SET budget = budget * 1.05 WHERE budget < :1", 300000.0)
        print(f"[yellow]Gave 5% budget increase to {result.rows_affected} smaller departments[/yellow]")

        # Delete
        result = driver.execute("DELETE FROM departments WHERE budget < :1", 160000.0)
        print(f"[yellow]Removed {result.rows_affected} departments with small budgets[/yellow]")

        # Use query builder with driver - this demonstrates the QueryBuilder parameter fix
        query = sql.select("*").from_("departments").where("budget > :1")
        large_depts = driver.select(query, 400000.0)
        print(f"[cyan]Large departments:[/cyan] {large_depts}")

        # Query builder with LIKE
        query = sql.select("name", "manager_name").from_("departments").where("manager_name LIKE :1").order_by("name")
        managers_with_a = driver.select(query, "A%")
        print(f"[cyan]Departments with managers starting with A:[/cyan] {managers_with_a}")

        # Demonstrate pagination
        page_departments = driver.select(
            "SELECT * FROM departments ORDER BY name OFFSET :1 ROWS FETCH NEXT :2 ROWS ONLY", 0, 2
        )
        total_count = driver.select_value("SELECT COUNT(*) FROM departments")
        print(f"[cyan]Page 1:[/cyan] {page_departments}, [cyan]Total:[/cyan] {total_count}")


def main() -> None:
    """Run oracledb sync example."""
    print("[bold cyan]=== oracledb (sync) Driver Example ===[/bold cyan]")
    try:
        oracledb_sync_example()
        print("[green]✅ oracledb sync example completed successfully![/green]")
    except Exception as e:
        print(f"[red]❌ oracledb sync example failed: {e}[/red]")
        print("[yellow]Make sure Oracle is running with: make infra-up[/yellow]")


if __name__ == "__main__":
    main()
