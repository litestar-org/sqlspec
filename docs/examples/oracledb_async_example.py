"""Example demonstrating oracledb async driver usage with query mixins.

This example shows how to use the oracledb async driver with the development Oracle
container started by `make infra-up`.
"""

import asyncio

from sqlspec import SQLSpec
from sqlspec.adapters.oracledb import OracleAsyncConfig
from sqlspec.builder import Select

__all__ = ("main", "oracledb_async_example")


async def oracledb_async_example() -> None:
    """Demonstrate oracledb async database driver usage with query mixins."""
    # Create SQLSpec instance with Oracle (connects to dev container)
    spec = SQLSpec()
    config = OracleAsyncConfig(
        pool_config={
            "host": "localhost",
            "port": 1522,
            "user": "system",
            "password": "oracle",
            "service_name": "FREEPDB1",
        }
    )
    spec.add_config(config)

    # Get a driver directly (drivers now have built-in query methods)
    async with spec.provide_session(config) as driver:
        # Create a table
        await driver.execute("""
            BEGIN
                EXECUTE IMMEDIATE 'DROP TABLE employees CASCADE CONSTRAINTS';
            EXCEPTION
                WHEN OTHERS THEN NULL;
            END;
        """)

        await driver.execute("""
            CREATE TABLE employees (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR2(255) NOT NULL,
                salary NUMBER(10,2) NOT NULL,
                department VARCHAR2(100),
                hire_date DATE DEFAULT SYSDATE
            )
        """)

        # Insert data
        await driver.execute(
            "INSERT INTO employees (name, salary, department) VALUES (:1, :2, :3)",
            "Alice Johnson",
            75000.00,
            "Engineering",
        )

        # Insert multiple rows
        await driver.execute_many(
            "INSERT INTO employees (name, salary, department) VALUES (:1, :2, :3)",
            [
                ("Bob Smith", 65000.00, "Engineering"),
                ("Carol Davis", 85000.00, "Engineering"),
                ("David Wilson", 55000.00, "Marketing"),
                ("Emma Brown", 95000.00, "Management"),
            ],
        )

        # Select all employees using query mixin
        employees = await driver.select("SELECT * FROM employees ORDER BY salary")
        print(f"All employees: {employees}")

        # Select one employee using query mixin
        alice = await driver.select_one("SELECT * FROM employees WHERE name = :1", "Alice Johnson")
        print(f"Alice: {alice}")

        # Select one or none (no match) using query mixin
        nobody = await driver.select_one_or_none("SELECT * FROM employees WHERE name = :1", "Nobody")
        print(f"Nobody: {nobody}")

        # Select scalar value using query mixin
        avg_salary = await driver.select_value("SELECT AVG(salary) FROM employees")
        print(f"Average salary: ${avg_salary:.2f}")

        # Update
        result = await driver.execute("UPDATE employees SET salary = salary * 1.1 WHERE department = :1", "Engineering")
        print(f"Gave 10% raise to {result.rows_affected} engineering employees")

        # Delete
        result = await driver.execute("DELETE FROM employees WHERE salary < :1", 60000.0)
        print(f"Removed {result.rows_affected} employees with low salaries")

        # Use query builder with driver - this demonstrates the QueryBuilder parameter fix
        query = Select("*").from_("employees").where("department = :1")
        engineers = await driver.select(query, "Engineering")
        print(f"Engineers: {engineers}")

        # Query builder with comparison
        query = Select("name", "salary").from_("employees").where("salary > :1").order_by("salary DESC")
        high_earners = await driver.select(query, 80000.0)
        print(f"High earners: {high_earners}")

        # Demonstrate pagination
        page_employees = await driver.select(
            "SELECT * FROM employees ORDER BY name OFFSET :1 ROWS FETCH NEXT :2 ROWS ONLY", 0, 2
        )
        total_count = await driver.select_value("SELECT COUNT(*) FROM employees")
        print(f"Page 1: {page_employees}, Total: {total_count}")


def main() -> None:
    """Run oracledb async example."""
    print("=== oracledb (async) Driver Example ===")
    try:
        asyncio.run(oracledb_async_example())
        print("✅ oracledb async example completed successfully!")
    except Exception as e:
        print(f"❌ oracledb async example failed: {e}")
        print("Make sure Oracle is running with: make infra-up")


if __name__ == "__main__":
    main()
